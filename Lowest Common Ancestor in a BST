/***** Given a Binary Tree and 2 nodes value n1 and n2, your task is to find the lowest common ancestor(LCA) of the two nodes ****/


#include<bits/stdc++.h>
using namespace std;
struct Node 
{
    int data;
    Node* right;
    Node* left;
    
    Node(int x)
    {
        data = x;
        right = NULL;
        left = NULL;
    }
};
void insert(Node ** tree, int val)
{
    Node *temp = NULL;
    if(!(*tree))
    {
        *tree = new Node(val);
        return;
    }
    if(val < (*tree)->data)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    {
        insert(&(*tree)->right, val);
    }
}
Node* LCA(Node *root, int , int );
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        Node *root;
        Node *tmp;
        root = NULL;
        int N;
        cin>>N;
        for(int i=0;i<N;i++)
        {
            int k;
            cin>>k;
            insert(&root, k);
        }
        int l,r;
        cin>>l>>r;
        cout<<LCA(root,l,r)->data<<endl;
    }
}
int find(Node* root,int n)
{
	if(root==NULL)
	return 0;
	if(root->data==n)
	return 1;
	return find(root->left,n)||find(root->right,n);
}
Node * lca(Node* root ,int n1 ,int n2 )
{
     if(root==NULL)
     return NULL;
     if(find(root->left,n1)&&find(root->left,n2))
     {
         return lca(root->left,n1,n2);
     }
     if(find(root->right,n1)&&find(root->right,n2))
     {
         return lca(root->right,n1,n2);
     }
     return root;
}
