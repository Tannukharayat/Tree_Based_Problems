/***** Given a Binary Search Tree and 2 nodes value n1 and n2, your task is to find the lowest common ancestor(LCA) of the two nodes ****/


#include<bits/stdc++.h>
using namespace std;
struct Node 
{
    int data;
    Node* right;
    Node* left;
    
    Node(int x)
    {
        data = x;
        right = NULL;
        left = NULL;
    }
};
void insert(Node ** tree, int val)
{
    Node *temp = NULL;
    if(!(*tree))
    {
        *tree = new Node(val);
        return;
    }
    if(val < (*tree)->data)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    {
        insert(&(*tree)->right, val);
    }
}
Node* LCA(Node *root, int , int );
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        Node *root;
        Node *tmp;
        root = NULL;
        int N;
        cin>>N;
        for(int i=0;i<N;i++)
        {
            int k;
            cin>>k;
            insert(&root, k);
        }
        int l,r;
        cin>>l>>r;
        cout<<LCA(root,l,r)->data<<endl;
    }
}
Node* LCA(Node *root, int n1, int n2)
{
    while(root!=NULL)
        {
            if(root->data>n1&&root->data>n2)
            root=root->left;
            else if(root->data<n1&&root->data<n2)
            root=root->right;
            else break;
        }
        return root;
}
