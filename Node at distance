/* Given a Binary Tree of N nodes and a positive integer k. The task is to count all distinct nodes that are distance k from a leaf
node. Here, k distance from leaf means k levels higher than a leaf node. For example, if k is more than height of Binary Tree, then 
nothing should be counted */

#include<bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 10000
struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};
int printKDistantfromLeaf(Node* node, int k);
 void insert(struct Node *root,int n1,int n2,char lr)
 {
     if(root==NULL)
        return;
     if(root->key==n1)
     {
         switch(lr)
         {
          case 'L': root->left=new Node(n2);
                    break;
          case 'R': root->right=new Node(n2);
                    break;
         }
     }
     else
     {
         insert(root->left,n1,n2,lr);
         insert(root->right,n1,n2,lr);
     }
 }
int main()
{
    int t,k;
    cin>>t;
    while(t--)
    {
    int n;
    cin>>n;
    struct Node *root=NULL;
    while(n--)
    {
        char lr;
        int n1,n2;
        cin>>n1>>n2;
        cin>>lr;
        if(root==NULL)
        {
            root=new Node(n1);
            switch(lr){
                    case 'L': root->left=new Node(n2);
                    break;
                    case 'R': root->right=new Node(n2);
                    break;
                    }
        }
        else
        {
            insert(root,n1,n2,lr);
        }
    }
    cin>>k;
    cout<<printKDistantfromLeaf(root, k)<<endl;
    }
    return 0;
}
void count_leaf(Node* np,int k,vector<Node*> v,unordered_set<Node*> &s)
{
    if(np==NULL)
    return;
   v.push_back(np);
   if(np->left==NULL&&np->right==NULL&&v.size()>=k+1)
   s.insert(v[v.size()-(k+1)]);
    count_leaf(np->left,k,v,s);
    count_leaf(np->right,k,v,s);
}
int printKDistantfromLeaf(Node* node, int k)
{
	vector<Node*> v;
	unordered_set<Node*> s;
	count_leaf(node,k,v,s);
	return s.size();
}
