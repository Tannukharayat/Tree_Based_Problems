/* Complete the function to print spiral order traversal of a tree */

#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
void printSpiral(struct Node *root);
/* Driver program to test above functions*/
int main()
{
   int t;
  scanf("%d
", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d
",&n);
     Node *root = NULL;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];
        Node *child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
    printSpiral(root);
    cout<<endl;
  }
    return 0;
}
void printSpiral(Node *root)
{
    int k=0;
   
    queue<Node*> q;
    vector<int> v[1000];
     v[k].push_back(root->data);
      q.push(root);
    while(!q.empty())
    {
         queue<Node*> q2;
        k++;
        while(!q.empty())
        {
            Node *np=q.front();
            q.pop();
            if(np->left!=NULL)
            {
            q2.push(np->left);
              v[k].push_back(np->left->data);
            }
            if(np->right!=NULL)
            {
            q2.push(np->right);
            v[k].push_back(np->right->data);
            }
        }
        q=q2;
    }
    cout<<v[0][0]<<" ";
    for(int i=1;i<k;i++)
    {
        if(i%2!=0)
        {
            for(int j=0;j<v[i].size();j++)
            cout<<v[i][j]<<" ";
        }else
        {
            for(int j=v[i].size()-1;j>=0;j--)
            cout<<v[i][j]<<" ";
        }
    }
}
