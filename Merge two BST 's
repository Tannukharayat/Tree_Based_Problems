/** Given two BST, you need to print the elements of both BSTs in sorted form.**/

#include<bits/stdc++.h>
using namespace std;
struct Node 
{
    int data;
    Node* right;
    Node* left;
    
    Node(int x){
        data = x;
        right = NULL;
        left = NULL;
    }
};
void insert(Node ** tree, int val)
{
    Node *temp = NULL;
    if(!(*tree))
    {
        *tree = new Node(val);
        return;
    }
    if(val < (*tree)->data)
    { 
    insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    { 
    insert(&(*tree)->right, val);
    }
}
void merge(Node *root1,Node *root2);
int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        Node *root1;Node *root2;
        Node *tmp;
        root1 = NULL;
        root2=NULL;
        int N;
        cin>>N;
        int M;
        cin>>M;
        for(int i=0;i<N;i++)
        {
            int k;
            cin>>k;
            insert(&root1, k);}
        for(int i=0;i<M;i++)
        {
            int k;
            cin>>k;
            insert(&root2, k);} 
       merge(root1,root2);
        cout<<endl;
    }
}

void tree1(vector<int>* v,Node *root)
{
    if(root!=NULL)
    {
        v->push_back(root->data);
        tree1(v,root->left);
        tree1(v,root->right);
    }
}
void tree2(vector<int>* v,Node *root)
{
    if(root!=NULL)
    {
        v->push_back(root->data);
        tree2(v,root->left);
        tree2(v,root->right);
    }
}
void merge(Node *root1, Node *root2)
{
   vector<int> v;
   tree1(&v,root1);
   tree2(&v,root2);
   sort(v.begin(),v.end());
   for(int i=0;i<v.size();i++)
   cout<<v[i]<<" ";
}
