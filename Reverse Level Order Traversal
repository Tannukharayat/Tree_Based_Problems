/* Given below is a tree. The task is to print the Reverse Level Order Traversal of the given tree. You will be given a function 
reversePrint(), which accepts root of the tree as argument */

#include<bits/stdc++.h>
using namespace std;
struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};
void reversePrint(Node *root);
int main()
{
   int t;
  scanf("%d
", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d
",&n);
     Node *root = NULL;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
      //  cout << n1 << " " << n2 << " " << (char)lr << endl;
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];
        Node *child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
   reversePrint(root);
   cout<<endl;
  }
    return 0;
}
void reversePrint(Node *root)
{
    queue<Node* > q;
    vector<int> v[100];
    int k=0;
	q.push(root);
	int sum=0;
	int c=0;
	while(!q.empty())
	{
	    queue<Node* > q1;
	    while(!q.empty())
	    {
	        Node* np=q.front();
	        q.pop();
	        v[k].push_back(np->data);
	        if(np->left!=NULL)
	        q1.push(np->left);
	        if(np->right!=NULL)
	        q1.push(np->right);
	    }
	    q=q1;
	    k++;
	}
	for(int i=k-1;i>=0;i--)
	{
	    for(int j=0;j<v[i].size();j++)
	    cout<<v[i][j]<<" ";
	}
}
