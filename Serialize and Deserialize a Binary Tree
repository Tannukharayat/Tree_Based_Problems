/** Serialization is to store a tree in an array so that it can be later restored and Deserialization is reading tree back from the array.
Now your task is to complete the function serialize which stores the tree into an array A[ ] and deSerialize which deserializes the array
to tree and returns it **/

#include <bits/stdc++.h>
using namespace std;
struct Node
{
	int data;
	struct Node *left;
	struct Node *right;
	
	Node(int x)
  {
	    data = x;
	    left = NULL;
	    right = NULL;
	}
};
void serialize(Node *root,vector<int> &);
Node * deSerialize(vector<int> &);
/* Computes the number of nodes in a tree. */
int height(struct Node* node)
{
  if (node==NULL)
    return 0;
  else
    return 1 + max(height(node->left), height(node->right));
}
void inorder(Node *root)
{
    if (root == NULL)
       return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
int main()
{
  int t;
  cin>>t;
  while (t--)
  {
     map<int, Node*> m;
     int n;
     cin>>n;
     int N = n;
     struct Node *root = NULL;
     struct Node *child;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];
        child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
    vector<int> A;
    A.clear();
    serialize(root,A);
    Node *tree_made = deSerialize(A);
    inorder(tree_made);
    cout<<endl;
  }
  return 0;
}
void serialize(Node *root,vector<int> &A)
{
    if(root==NULL)
    {
        A.push_back(-1);
        return;
    }
    A.push_back(root->data);
    serialize(root->left,A);
    serialize(root->right,A);
    
}
Node * deSerialize_calc(vector<int> &A,int &index)
{
     Node *temp;
     if(index==A.size()||A[index]==-1)
     {
         index++;
         return NULL;   
     }
     temp=new Node(A[index]);
     index++;
     temp->left=deSerialize_calc(A,index);
     temp->right=deSerialize_calc(A,index);
     return temp;
}
Node * deSerialize(vector<int> &A)
{
     int index=0;
     return deSerialize_calc(A,index);
}
