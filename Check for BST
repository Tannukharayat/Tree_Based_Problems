/* Given a binary tree, return true if it is BST, else false. For example, the following tree is not BST, because 11 is in left subtree 
of 10. The task is to complete the function isBST() which takes one argument, root of Binary Tree */


#include <bits/stdc++.h>
using namespace std;
struct Node 
{
    int data;
    Node* right;
    Node* left;
    
    Node(int x){
        data = x;
        right = NULL;
        left = NULL;
    }
};

bool isBST(struct Node* node);
int isBSTUtil(struct Node* node, int min, int max);
int main()
{
  int t;
  struct Node *child;
  scanf("%d", &t);
  while (t--)
  {
     map<int, Node*> m;
     int n;
     scanf("%d",&n);
     struct Node *root = NULL;
     while (n--)
     {
        Node *parent;
        char lr;
        int n1, n2;
        scanf("%d %d %c", &n1, &n2, &lr);
        if (m.find(n1) == m.end())
        {
           parent = new Node(n1);
           m[n1] = parent;
           if (root == NULL)
             root = parent;
        }
        else
           parent = m[n1];
        child = new Node(n2);
        if (lr == 'L')
          parent->left = child;
        else
          parent->right = child;
        m[n2]  = child;
     }
     cout << isBST(root) << endl;
  }
  return 0;
}
void inorder(Node* root,vector<int> *v)
{
    if(root!=NULL)
    {
        inorder(root->left,v);
        v->push_back(root->data);
        inorder(root->right,v);
    }
}
bool isBST(Node* root) 
{
    if(root==NULL)
    return 1;
    vector<int> v;
    vector<int> v1;
   inorder(root,&v);
   v1=v;
   sort(v.begin(),v.end());
   int c=0;
   for(int i=0;i<v.size();i++)
   {
       if(v[i]!=v1[i])
       {
           c=1;
           break;
       }
   }
   if(c==1)
   return 0;
   else return 1;
}
